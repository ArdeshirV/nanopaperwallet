/* =============================================================================
   SCSS mixins.
   ========================================================================== */

/* For linear-gradient */

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
      $color-stops: $direction, $color-stops;
      $direction: 180deg;
    }
  
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
  }
  
  /* For transition */
  @mixin transition($args...) {
    -webkit-transition: $args;
      -moz-transition: $args;
      transition: $args;
  }
  
  @mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
  }
  
  /// Test if `$value` is a valid direction
  /// @param {*} $value - Value to test
  /// @return {Bool}
  @function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
    @return $is-keyword or $is-angle;
  }
  
  /// Convert a direction to legacy syntax
  /// @param {Keyword | Angle} $value - Value to convert
  /// @require {function} is-direction
  /// @require {function} convert-angle
  /// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
  @function legacy-direction($value) {
    @if is-direction($value) == false {
      @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }
  
    $conversion-map: (
      to top          : bottom,
      to top right    : bottom left,
      to right top    : left bottom,
      to right        : left,
      to bottom right : top left,
      to right bottom : left top,
      to bottom       : top,
      to bottom left  : top right,
      to left bottom  : right top,
      to left         : right,
      to left top     : right bottom,
      to top left     : bottom right
    );
  
    @if map-has-key($conversion-map, $value) {
      @return map-get($conversion-map, $value);
    }
  
    @return 90deg - $value;
  }
  
  /* px->rem converter for font */
  
  @function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
  }
  
  @mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
  }
  
  /* box-shadow */
  
  @mixin box-shadow($shadows...) {
    -webkit-box-shadow: $shadows;
    -moz-box-shadow: $shadows;
    box-shadow: $shadows;
  }
  
  /* box-sizing */
  
  @mixin box-sizing($args...) {
    -webkit-box-sizing: $args;
    -moz-box-sizing: $args;
    box-sizing: $args;
  }
  
  /* border-radius */
  
  @mixin border-radius($radii...) {
    -webkit-border-radius: $radii;
    -moz-border-radius: $radii;
    border-radius: $radii;
  }

  //
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
  // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// A map of breakpoints.
$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px
);